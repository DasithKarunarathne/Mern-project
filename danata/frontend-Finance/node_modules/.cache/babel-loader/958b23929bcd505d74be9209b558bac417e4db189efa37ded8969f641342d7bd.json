{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dasit\\\\OneDrive\\\\Documents\\\\GitHub\\\\Mern-project\\\\frontend\\\\frontend-Finance\\\\src\\\\components\\\\PettyCash.js\\\\PettyCashDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport BalanceCard from \"./BalanceCard\";\nimport TransactionTable from \"./TransactionTable\";\nimport AddTransactionForm from \"./AddTransactionForm\";\nimport { getPettyCash } from \"../services/api\";\nimport { Box, Button, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PettyCashDashboard = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [balance, setBalance] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().slice(0, 7)); // Default to current month and year\n  const [filterTriggered, setFilterTriggered] = useState(false); // New state to track manual filter\n\n  const fetchTransactions = async date => {\n    try {\n      const [year, month] = date.split('-');\n      const response = await getPettyCash(parseInt(month, 10), parseInt(year, 10));\n      setTransactions(response.data.transactions);\n      setBalance(response.data.Currentbalance);\n    } catch (error) {\n      console.error(\"Error fetching transactions: \", error);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions(selectedDate);\n  }, [selectedDate, filterTriggered]); // Trigger fetch only when filterTriggered changes\n\n  const handleDateChange = event => {\n    const newDate = event.target.value;\n    if (newDate) {\n      setSelectedDate(newDate);\n    } else {\n      console.warn(\"Invalid date selected\");\n    }\n  };\n  const handleFilterClick = () => {\n    setFilterTriggered(prev => !prev); // Toggle filterTriggered to trigger useEffect\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      sx: {\n        mb: 2\n      },\n      children: \"Petty Cash Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        gap: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"month\",\n        value: selectedDate,\n        onChange: handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleFilterClick,\n        children: \"Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BalanceCard, {\n      balance: balance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      onAdd: () => fetchTransactions(selectedDate)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TransactionTable, {\n      transactions: transactions,\n      onUpdate: () => fetchTransactions(selectedDate)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(PettyCashDashboard, \"Gd9DFKX2eSmdJr8neR9fpdSNW6A=\");\n_c = PettyCashDashboard;\nexport default PettyCashDashboard;\nvar _c;\n$RefreshReg$(_c, \"PettyCashDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BalanceCard","TransactionTable","AddTransactionForm","getPettyCash","Box","Button","Typography","jsxDEV","_jsxDEV","PettyCashDashboard","_s","transactions","setTransactions","balance","setBalance","selectedDate","setSelectedDate","Date","toISOString","slice","filterTriggered","setFilterTriggered","fetchTransactions","date","year","month","split","response","parseInt","data","Currentbalance","error","console","handleDateChange","event","newDate","target","value","warn","handleFilterClick","prev","children","variant","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","type","onChange","onClick","onAdd","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/dasit/OneDrive/Documents/GitHub/Mern-project/frontend/frontend-Finance/src/components/PettyCash.js/PettyCashDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport BalanceCard from \"./BalanceCard\";\r\nimport TransactionTable from \"./TransactionTable\";\r\nimport AddTransactionForm from \"./AddTransactionForm\";\r\nimport { getPettyCash } from \"../services/api\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\n\r\nconst PettyCashDashboard = () => {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [balance, setBalance] = useState(0);\r\n    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().slice(0, 7)); // Default to current month and year\r\n    const [filterTriggered, setFilterTriggered] = useState(false); // New state to track manual filter\r\n\r\n    const fetchTransactions = async (date) => {\r\n        try {\r\n            const [year, month] = date.split('-');\r\n            const response = await getPettyCash(parseInt(month, 10), parseInt(year, 10));\r\n            setTransactions(response.data.transactions);\r\n            setBalance(response.data.Currentbalance);\r\n        } catch (error) {\r\n            console.error(\"Error fetching transactions: \", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTransactions(selectedDate);\r\n    }, [selectedDate, filterTriggered]); // Trigger fetch only when filterTriggered changes\r\n\r\n    const handleDateChange = (event) => {\r\n        const newDate = event.target.value;\r\n        if (newDate) {\r\n            setSelectedDate(newDate);\r\n        } else {\r\n            console.warn(\"Invalid date selected\");\r\n        }\r\n    };\r\n\r\n    const handleFilterClick = () => {\r\n        setFilterTriggered((prev) => !prev); // Toggle filterTriggered to trigger useEffect\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Typography variant=\"h4\" sx={{ mb: 2 }}>Petty Cash Management</Typography>\r\n            <Box sx={{ display: \"flex\", gap: 2, mb: 2 }}>\r\n                <input\r\n                    type=\"month\"\r\n                    value={selectedDate}\r\n                    onChange={handleDateChange}\r\n                />\r\n                <Button variant=\"contained\" onClick={handleFilterClick}>Filter</Button>\r\n            </Box>\r\n\r\n            <BalanceCard balance={balance} />\r\n            <AddTransactionForm onAdd={() => fetchTransactions(selectedDate)} />\r\n            <TransactionTable transactions={transactions} onUpdate={() => fetchTransactions(selectedDate)} />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default PettyCashDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}