{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dasit\\\\OneDrive\\\\Documents\\\\GitHub\\\\Mern-project\\\\frontend\\\\src\\\\components\\\\SalaryTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Salarytable = () => {\n  _s();\n  const [month, setMonth] = useState(\"2025-02\");\n  const [salaries, setsalaries] = useState([]);\n\n  //fetches salaries when month is changed\n  useEffect(() => {\n    fetchSalaries();\n  }, [month]);\n\n  //fetch salaries\n  const fetchSalaries = async () => {\n    if (!month) {\n      alert(\"PLease select a month\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:4000/api/Salary/${month}`); //CHECK\n      setsalaries(response.data.salaries || response.data); //.salaries not needed i think\n    } catch (error) {\n      console.error(\"Error fetching salaries\", error);\n    }\n  };\n\n  //generate salaries for a selected month\n  const genSalaries = async () => {\n    if (!month) {\n      alert(\"Please select a month to generate salaries\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:4000/api/Salary/calculate\", {\n        month\n      });\n      setsalaries(response.data.salaries);\n    } catch (error) {\n      //res.status barida\n      console.error(\"Error generating salaries\");\n    }\n  };\n  const markSalaryPaid = async salaryId => {\n    try {\n      await axios.put(`http://localhost:4000/api/Salary/markPaid/${salaryId}`);\n      alert(\"Salary marked as paid\");\n      fetchSalaries();\n    } catch (error) {\n      console.error(\"Error marking slary as paid\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"top-Heading\",\n      children: \"Salary Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"month\",\n        value: month,\n        onChange: e => setMonth(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchSalaries,\n        children: \"Fetch Salaries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: genSalaries,\n        children: \"Generate Salaries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Basic Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Overtime Pay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"EPF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ETF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Net Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: salaries.map(salary => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: salary.employeeId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.employeeName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.month\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.basicSalary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.overtimeHours\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.epf\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.etf\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.netSalary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: salary.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: salary.status === 'Pending' ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => markSalaryPaid(salary._id),\n              children: \"Mark as Paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Paid on \", new Date(salary.paymentDate).toLocaleDateString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 25\n            }, this) //check this\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, salary._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(Salarytable, \"Sggek4x5DlLVdGchxSr1ykxDntA=\");\n_c = Salarytable;\nexport default Salarytable;\nvar _c;\n$RefreshReg$(_c, \"Salarytable\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Salarytable","_s","month","setMonth","salaries","setsalaries","fetchSalaries","alert","response","get","data","error","console","genSalaries","post","markSalaryPaid","salaryId","put","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","map","salary","employeeId","employeeName","basicSalary","overtimeHours","epf","etf","netSalary","status","_id","Date","paymentDate","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/dasit/OneDrive/Documents/GitHub/Mern-project/frontend/src/components/SalaryTable.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst Salarytable = () =>{\r\n\r\n    const [month, setMonth] = useState(\"2025-02\");\r\n    const [salaries, setsalaries] =useState([]);\r\n    \r\n\r\n//fetches salaries when month is changed\r\nuseEffect(() => {\r\n    fetchSalaries();\r\n  }, [month]);\r\n\r\n    //fetch salaries\r\n    const fetchSalaries = async ()=>{\r\n        if(!month){\r\n            alert(\"PLease select a month\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/api/Salary/${month}`);//CHECK\r\n            setsalaries(response.data.salaries || response.data);//.salaries not needed i think\r\n            \r\n        \r\n        } catch (error) {\r\n            console.error(\"Error fetching salaries\", error);\r\n        }\r\n    };\r\n\r\n    //generate salaries for a selected month\r\n    const genSalaries = async ()=>{\r\n\r\n        if(!month){\r\n            alert(\"Please select a month to generate salaries\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axios.post(\"http://localhost:4000/api/Salary/calculate\",{month});\r\n            \r\n            setsalaries(response.data.salaries);\r\n        } catch (error) {\r\n            //res.status barida\r\n            console.error(\"Error generating salaries\");\r\n        }\r\n    };\r\n\r\n    const markSalaryPaid = async (salaryId)=>{\r\n        try {\r\n           await axios.put(`http://localhost:4000/api/Salary/markPaid/${salaryId}`);\r\n            alert(\"Salary marked as paid\");\r\n            fetchSalaries();\r\n        } catch (error) {\r\n            console.error(\"Error marking slary as paid\", error);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h2 className=\"top-Heading\">Salary Management</h2>\r\n\r\n            <div>\r\n                <input \r\n                type = \"month\"\r\n                value={month}\r\n                onChange={(e)=> setMonth(e.target.value)}/>\r\n<button onClick={fetchSalaries}>Fetch Salaries</button>\r\n<button onClick={genSalaries}>Generate Salaries</button>\r\n            </div>\r\n\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                <th>Employee ID</th>\r\n                        <th>Employee Name</th>\r\n                        <th>Month</th>\r\n                        <th>Basic Salary</th>\r\n                        <th>Overtime Pay</th>\r\n                        <th>EPF</th>\r\n                        <th>ETF</th>\r\n                        <th>Net Salary</th>\r\n                        <th>Status</th>\r\n                        <th>Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {salaries.map((salary)=>(\r\n\r\n                    <tr key={salary._id}>\r\n<td>{salary.employeeId}</td>\r\n\r\n<td className=\"border p-2\">{salary.employeeName}</td>\r\n                                <td className=\"border p-2\">{salary.month}</td>\r\n                                <td className=\"border p-2\">{salary.basicSalary}</td>\r\n                                <td className=\"border p-2\">{salary.overtimeHours}</td>\r\n                                <td className=\"border p-2\">{salary.epf}</td>\r\n                                <td className=\"border p-2\">{salary.etf}</td>\r\n                                <td className=\"border p-2\">{salary.netSalary}</td>\r\n                                <td className=\"border p-2\">{salary.status}</td>\r\n\r\n                <td>\r\n                    {salary.status === 'Pending'?(\r\n                        <button onClick={()=>markSalaryPaid(salary._id)}>Mark as Paid</button>\r\n                    ) :(\r\n                        <span>Paid on {new Date(salary.paymentDate).toLocaleDateString()}</span>//check this\r\n                    )\r\n                    }\r\n                </td>\r\n\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n\r\n        </div>\r\n\r\n        \r\n\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Salarytable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}