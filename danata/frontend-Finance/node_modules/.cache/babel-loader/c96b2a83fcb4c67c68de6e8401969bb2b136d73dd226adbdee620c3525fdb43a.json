{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dasit\\\\OneDrive\\\\Documents\\\\GitHub\\\\Mern-project\\\\frontend\\\\src\\\\components\\\\PettyCash.js\\\\PettyCashDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport BalanceCard from \"./BalanceCard\";\nimport TransactionTable from \"./TransactionTable\";\nimport AddTransactionForm from \"./AddTransactionForm\";\nimport { getPettyCash } from \"../services/api\";\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker'; // Only import once\nimport { Box, Button, Typography } from \"@mui/material\";\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PettyCashDashboard = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [balance, setBalance] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [filterTriggered, setFilterTriggered] = useState(false); // New state to track manual filter\n\n  const fetchTransactions = async date => {\n    try {\n      const month = date.getMonth() + 1;\n      const year = date.getFullYear();\n      const response = await getPettyCash(month, year);\n      setTransactions(response.data.Transactions);\n      setBalance(response.data.CurrentBalance);\n    } catch (error) {\n      console.error(\"Error fetching transactions: \", error);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions(selectedDate);\n  }, [filterTriggered]); // Trigger fetch only when filterTriggered changes\n\n  const handleDateChange = newValue => {\n    if (newValue instanceof Date && !isNaN(newValue)) {\n      setSelectedDate(newValue);\n    } else {\n      console.warn(\"Invalid date selected\");\n    }\n  };\n  const handleFilterClick = () => {\n    setFilterTriggered(prev => !prev); // Toggle filterTriggered to trigger useEffect\n  };\n  return /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n    dateAdapter: AdapterDateFns,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          mb: 2\n        },\n        children: \"Petty Cash Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          gap: 2,\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n          views: [\"month\", \"year\"],\n          label: \"Month and Year\",\n          value: selectedDate,\n          onChange: handleDateChange // Use handleDateChange for validation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleFilterClick,\n          children: \"Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BalanceCard, {\n        balance: balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n        onAdd: () => fetchTransactions(selectedDate)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TransactionTable, {\n        transactions: transactions,\n        onUpdate: () => fetchTransactions(selectedDate)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(PettyCashDashboard, \"CIp4FJuJGGjwFX3UxEaP36G//qo=\");\n_c = PettyCashDashboard;\nexport default PettyCashDashboard;\nvar _c;\n$RefreshReg$(_c, \"PettyCashDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BalanceCard","TransactionTable","AddTransactionForm","getPettyCash","LocalizationProvider","DatePicker","Box","Button","Typography","AdapterDateFns","jsxDEV","_jsxDEV","PettyCashDashboard","_s","transactions","setTransactions","balance","setBalance","selectedDate","setSelectedDate","Date","filterTriggered","setFilterTriggered","fetchTransactions","date","month","getMonth","year","getFullYear","response","data","Transactions","CurrentBalance","error","console","handleDateChange","newValue","isNaN","warn","handleFilterClick","prev","dateAdapter","children","variant","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","views","label","value","onChange","onClick","onAdd","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/dasit/OneDrive/Documents/GitHub/Mern-project/frontend/src/components/PettyCash.js/PettyCashDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport BalanceCard from \"./BalanceCard\";\r\nimport TransactionTable from \"./TransactionTable\";\r\nimport AddTransactionForm from \"./AddTransactionForm\";\r\nimport { getPettyCash } from \"../services/api\";\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker'; // Only import once\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\n\r\nconst PettyCashDashboard = () => {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [balance, setBalance] = useState(0);\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [filterTriggered, setFilterTriggered] = useState(false); // New state to track manual filter\r\n\r\n    const fetchTransactions = async (date) => {\r\n        try {\r\n            const month = date.getMonth() + 1;\r\n            const year = date.getFullYear();\r\n            const response = await getPettyCash(month, year);\r\n            setTransactions(response.data.Transactions);\r\n            setBalance(response.data.CurrentBalance);\r\n        } catch (error) {\r\n            console.error(\"Error fetching transactions: \", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTransactions(selectedDate);\r\n    }, [filterTriggered]); // Trigger fetch only when filterTriggered changes\r\n\r\n    const handleDateChange = (newValue) => {\r\n        if (newValue instanceof Date && !isNaN(newValue)) {\r\n            setSelectedDate(newValue);\r\n        } else {\r\n            console.warn(\"Invalid date selected\");\r\n        }\r\n    };\r\n\r\n    const handleFilterClick = () => {\r\n        setFilterTriggered((prev) => !prev); // Toggle filterTriggered to trigger useEffect\r\n    };\r\n\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <Box>\r\n                <Typography variant=\"h4\" sx={{ mb: 2 }}>Petty Cash Management</Typography>\r\n                <Box sx={{ display: \"flex\", gap: 2, mb: 2 }}>\r\n                    <DatePicker\r\n                        views={[\"month\", \"year\"]}\r\n                        label=\"Month and Year\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange} // Use handleDateChange for validation\r\n                    />\r\n                    <Button variant=\"contained\" onClick={handleFilterClick}>Filter</Button>\r\n                </Box>\r\n\r\n                <BalanceCard balance={balance} />\r\n                <AddTransactionForm onAdd={() => fetchTransactions(selectedDate)} />\r\n                <TransactionTable transactions={transactions} onUpdate={() => fetchTransactions(selectedDate)} />\r\n            </Box>\r\n        </LocalizationProvider>\r\n    );\r\n};\r\n\r\nexport default PettyCashDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}